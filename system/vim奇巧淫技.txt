?                 用命令行模式执行反向查找
=                 用命令行模式对一个 Vim 脚本表达式求值
.                 命令可以让我们重复上次的修改 “上次修改”可以指很多东西，一次修改的单位可以是字符、整行，甚至是整个文件。
x                 命令会删除光标下的字符
>G                命令会增加从当前行到文档末尾处的缩进层级，当前行到最后一行缩进一个tab的长度
S                 清除光标所在行内容并进入插入模式
;                 命令会重复查找上次 f 命令所查找的字符
,                 命令会反向重复查找上次 f 命令所查找的字符
@:                可以用来重复任意Ex命令，或者也可以输入 &
f{char}/t{char}   在光标所在行查询char制定的字符 f会将光标移到到第一个匹配字符上，t会将光标移到到第一个匹配字符前一位上 F，T 是反向查询
*                 全局搜索光标所在的词，并将光标移到下一个匹配的词
db                命令删除从光标起始位置到单词开头的内容，但不会删除当时光标所在的字符
b                 命令把光标移到单词的开头
W/w               命令把光标移到下一个单词的开头
b                 命令把光标移到上一个单词的开头
e                 命令把光标移到下一个单词的结尾
ge                反向移动到上一单词的结尾
g~                反转大小写
gu                转换为小写
gU                转换为大写
>                 增加缩进
<                 减小缩进
=                 自动缩进
!                 使用外部程序过滤{motion}所跨越的行
q/                打开查找命令历史的命令行窗口
q:                打开 Ex 命令历史的命令行窗口
gv                重选上次的高亮选区
<Ctrl-f>          从命令行模式切换到命令行窗口
命令行模式下
:t                copy to
:m                move
!                 用于执行shell命令 #:2,$!sort -t',' -k2
:shell            启动一个shell (输入exit返回 Vim)
:!{cmd}           在shell 中执行 {cmd}
:read !{cmd}      在shell 中执行 {cmd} ，并把其标准输出插入光标下方
:[range]write !{cmd} 在 shell 中执行 {cmd} ，以 [range] 作为其标准输入
:[range]!{filter} 使用外部程序 {filter} 过滤指定的 [range]

如果想在一系列连续行上执行一条普通模式命令，可以用
:normal 命令。此命令在与 . 命令或宏结合使用时，只需花费很
少的努力就能完成大量重复性任务
:%normal A; 告诉 Vim 在文件每行的结尾都添加一个分号。在做此修改时会切换到插入模式，但是在修改完后，Vim会自动返回到普通模式。

插入模式下
<C-w>             删除前一个单词
<C-u>             删至行首

设置vim tab=4
:set shiftwidth=4 softtabstop=4 expandtab

这里的w指的是 dw 和 daw的区别
w 看起来与 aw 效果差不多. 区别在于光标位置. 比如, 如果用 dw 来删除一个词, 光标必须在词的开头. 如果在除了开头的其他位置使用 dw, 只能删除部分单词. 但是, daw 允许光标在一个词的任何位置删除整个单词

<C-a> 和 <C-x> 命令分别对数字执行加和减操作。在不带次数执行时，它们会逐个加减，但如果带一个次数前缀，那么可以用它们加减任意整数。例如，如果把光标移到字符5上，执行 10<C-a> 就会把它变成15。
但是如果光标不在数字上会发生什么？文档里说， <C-a> 命令会“把当前光标之上或之后的数值加上 [count]”（参见 :h ctrl-a）。因此，如果光标不在数字上，
那么 <C-a> 命令将在当前行正向查找一个数字，如果找到了，它就径直跳到那里。我们可以利用这一点简化操作

数字的格式
007的后面是什么？不，这不是詹姆斯·邦德的恶作剧，我是在问：如果对007加1，你觉得会得到什么结果。如果你的答案是008，那么当你尝试对任意以0开头的数字使
用 <C-a> 命令时，也许会感到诧异。像在某些编程语言中的约定一样，
Vim把以0开头的数字解释为八进制值，而不是十进制。在八进制体系中，007 + 001 = 010，看起来像是十进制中的10，但实际上它是八进制中的8，糊涂了吗？
如果你经常使用八进制，Vim的缺省行为或许会适合你。如果不是这样，那么你可能想把下面这行加入你的vimrc里：
set nrformats=
这会让Vim把所有数字都当成十进制，不管它们是不是以0开头的

插入-普通模式是普通模式的一个特例，它能让我们执行一次普通
模式命令。在此模式中，可以执行一个普通模式命令，执行完后，马上
又返回到插入模式。要从插入模式切换到插入-普通模式，可以按 <C-o>

yt, 命令把“Practical Vim”复制到复制专用寄存器中（将在技巧50
中结识 t{char} 动作命令），然后在插入模式中，按 <C-r>0 把刚才复
制的文本粘贴到光标所在位置（将在第10章以大量的篇幅介绍寄存器以
及复制操作）
在插入模式中，按 <C-r>0 把刚才复制的文本粘贴到光标所在位置 这个命令的一般格式是 <C-r>{register}其中 {register}``是想要插入的寄存器的名字


目的 							操作 	                 重复 	           回退
做出一个修改 					{edit}                     . 		        u
在行内查找下一指定字符 			f{char}/t{char}            ;                ,
在行内查找上一指定字符 			F{char}/T{char}            ;                ,
在文档中查找下一处匹配项 		/pattern                   n                N
在文档中查找上一处匹配项 		?pattern                   n                N
执行替换 						:s/target/replacement      &                u
执行一系列修改                  qx{changes}q               @x               u



复合命令 等效的长命令
A			$a
C			c$
s			cl
S			^C
I			^i
o			A<enter>
O			ko





